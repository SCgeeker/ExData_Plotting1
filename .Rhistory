plot(SIM$mids,SIM$densit)
hist(rexp(40,Lambda))
hist(rexp(40,Lambda))
hist(rexp(40,Lambda))
hist(rexp(40,Lambda))
hist(rexp(40,Lambda))
hist(rexp(40,Lambda))
hist(rexp(40,Lambda))
M_exp <- 1/Lambda
M_exp
Lambda = 0.2
hist(rexp(40,Lambda))
M_exp <- 1/Lambda
SD_exp <- 1/Lambda
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,Lambda)))
SIM <- hist(mns)
abline(V=M_exp, col = "red")
abline(H=M_exp, col = "red")
abline(v=M_exp, col = "red")
abline(v=M_exp + SD_exp, col = "blue")
abline(v=(M_exp + SD_exp), col = "blue")
(M_exp + SD_exp)
(M_exp + SD_exp)
abline(v = (M_exp + SD_exp), col = "blue")
1/Lambda
abline(v = (M_exp + SD_exp/sqrt(40)), col = "blue")
abline(v=M_exp - SD_exp/sqrt(40), col = "bule")
abline(v=M_exp - SD_exp/sqrt(40), col = "bule")
abline(v = (M_exp - SD_exp/sqrt(40)), col = "bule")
(M_exp - SD_exp/sqrt(40))
abline(v = (M_exp - SD_exp/sqrt(40)), col = "bule")
abline(v = (M_exp - SD_exp/sqrt(40)), col = "blue")
SIM
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,Lambda)))
SIM <- hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,Lambda)))
SIM <- hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,Lambda)))
SIM <- hist(mns)
abline(v=M_exp, col = "red")
abline(v = (M_exp + SD_exp/sqrt(40)), col = "blue")
abline(v = (M_exp - SD_exp/sqrt(40)), col = "blue")
?hist
SIM <- hist(mns, density = TRUE)
SIM <- hist(mns)
plot(SIM$mids,SIM$densit)
mean(mns)
sd(mns)
SD_exp/sqrt(40)
mean(mns) == M_exp
mean(mns) - M_exp
sd(mns) - SD_exp/sqrt(40)
SIM <- hist(mns)
plot(SIM$mids,SIM$densit)
plot(SIM$mids,SIM$densit, lty = "l")
?plot
plot(SIM$mids,SIM$densit, type = "l")
seq(3:8,by=.001)
seq(3,8,by=.001)
dnorm(seq(3,8,by=.001))
points(seq(3,8,by=.001),dnorm(seq(3,8,by=.001)))
?points
?dnorm
dnorm(seq(3,8,by=.001), M_exp, SD_exp/sqrt(40))
points(seq(3,8,by=.001),dnorm(seq(3,8,by=.001), M_exp, SD_exp/sqrt(40)))
plot(SIM$mids,SIM$densit, type = "l")
points(seq(3,8,by=.001),dnorm(seq(3,8,by=.001), M_exp, SD_exp/sqrt(40)))
plot(SIM$mids,SIM$densit, type = "l", col = "red")
points(seq(3,8,by=.001),dnorm(seq(3,8,by=.001), M_exp, SD_exp/sqrt(40)))
Lambda = 0.2
hist(rexp(40,Lambda))
M_exp <- 1/Lambda
SD_exp <- 1/Lambda
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,Lambda)))
mean(mns) - M_exp
sd(mns) - SD_exp/sqrt(40)
SIM <- hist(mns)
abline(v=M_exp, col = "red")
plot(SIM$mids,SIM$densit, type = "l", col = "red")
points(seq(3,8,by=.001),dnorm(seq(3,8,by=.001), M_exp, SD_exp/sqrt(40)))
Lambda = 0.2
hist(rexp(40,Lambda))
M_exp <- 1/Lambda
SD_exp <- 1/Lambda
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,Lambda)))
mean(mns) - M_exp
sd(mns) - SD_exp/sqrt(40)
SIM <- hist(mns)
#abline(v=M_exp, col = "red")
#abline(v = (M_exp + SD_exp/sqrt(40)), col = "blue")
#abline(v = (M_exp - SD_exp/sqrt(40)), col = "blue")
plot(SIM$mids,SIM$densit, type = "l", col = "red")
points(seq(3,8,by=.001),dnorm(seq(3,8,by=.001), M_exp, SD_exp/sqrt(40)))
Lambda = 0.2
hist(rexp(40,Lambda))
M_exp <- 1/Lambda
SD_exp <- 1/Lambda
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,Lambda)))
mean(mns) - M_exp
sd(mns) - SD_exp/sqrt(40)
SIM <- hist(mns)
#abline(v=M_exp, col = "red")
#abline(v = (M_exp + SD_exp/sqrt(40)), col = "blue")
#abline(v = (M_exp - SD_exp/sqrt(40)), col = "blue")
plot(SIM$mids,SIM$densit, type = "l", col = "red")
points(seq(2,8,by=.001),dnorm(seq(2,8,by=.001), M_exp, SD_exp/sqrt(40)))
source('F:/Data_science_programs/StatisticalInference/StatInf_Assessment/Part01.R')
source('F:/Data_science_programs/StatisticalInference/StatInf_Assessment/Part01.R')
?points
source('F:/Data_science_programs/StatisticalInference/StatInf_Assessment/Part01.R')
SIM$density
source('F:/Data_science_programs/StatisticalInference/StatInf_Assessment/Part01.R')
source('F:/Data_science_programs/StatisticalInference/StatInf_Assessment/Part01.R')
?plot
plot(seq(2,8,by=.01),dnorm(seq(2,8,by=.01), M_exp, SD_exp/sqrt(40)))
plot(seq(2,8,by=.01),dnorm(seq(2,8,by=.01), M_exp, SD_exp/sqrt(40)), type = "l")
lines(SIM$mids,SIM$density, type = "l", col = "red")
plot(seq(2,8,by=.01),dnorm(seq(2,8,by=.01), M_exp, SD_exp/sqrt(40)), type = "l", xlab = "quantity", ylab = "density")
lines(SIM$mids,SIM$density, type = "l", col = "red")
plot(seq(2,8,by=.01),dnorm(seq(2,8,by=.01), M_exp, SD_exp/sqrt(40)), type = "l", xlab = "quantile", ylab = "density")
lines(SIM$mids,SIM$density, type = "l", col = "red")
mean(mns)
sd(mns)
abs(mean(mns) - M_exp)
abs(sd(mns) - SD_exp/sqrt(40))
mns
min(mns)
max(mns)
plot(seq(min(mns),max(mns),by=.01),dnorm(seq(min(mns),max(mns),by=.01), M_exp, SD_exp/sqrt(40)), type = "l", xlab = "quantile", ylab = "density")
lines(SIM$mids,SIM$density, type = "l", col = "red")
SIM$density
SIM$mids
plot(seq(min(SIM$mids),max(SIM$mids),by=.01),dnorm(seq(min(mns),max(mns),by=.01), M_exp, SD_exp/sqrt(40)), type = "l", xlab = "quantile", ylab = "density")
plot(seq(min(SIM$mids),max(SIM$mids),by=.01),dnorm(seq(min(SIM$mids),max(SIM$mids),by=.01), M_exp, SD_exp/sqrt(40)), type = "l", xlab = "quantile", ylab = "density")
lines(SIM$mids,SIM$density, type = "l", col = "red")
require(datasets)
summary(ToothGrowth)
head(ToothGrowth)
summary(ToothGrowth)
summary(ToothGrowth)
head(ToothGrowth)
tail(ToothGrowth)
table(ToothGrowth$dose)
table(ToothGrowth$supp)
subset(TothGrowth, supp = table(ToothGrowth$supp)[1])
subset(ToothGrowth, supp = table(ToothGrowth$supp)[1])
table(ToothGrowth$supp)[1]
names(table(ToothGrowth$supp)[1])
subset(ToothGrowth, supp = names(table(ToothGrowth$supp)[1]))
names(table(ToothGrowth$supp)[1])
subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1]))
subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1]))$len
boxplot(subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1]))$len ~ dose, data = ToothGrowth)
boxplot(len ~ dose, data = ToothGrowth)
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1])))
colnames(ToothGrowth)
colnames(ToothGrowth)[3]
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1])), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1])
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1])), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1])
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[2])), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1])
names(table(ToothGrowth$supp)[1]
names(table(ToothGrowth$supp)[1])
names(table(ToothGrowth$supp)[1])
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1])), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[1]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[2])), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[2]))
summary(ToothGrowth)
?with
levels(supp)[1]
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[1]))
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[1]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[2]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[2]))
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[1]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[2]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[2]))
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[1]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[2]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[2]))
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[1]))
colnames(ToothGrowth)[1]
colnames(ToothGrowth)
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[1])
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[1]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[2]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[2]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(ToothGrowth$supp)[1])
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[2]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(ToothGrowth$supp)[2])
?t.test
with(subset(ToothGrowth, supp == levels(supp)[1]), t.test(len, dose), )
with(subset(ToothGrowth, supp == levels(supp)[1]), t.test(dose, len), )
with(subset(ToothGrowth, supp == levels(supp)[1]), t.test(len ~ dose), )
with(subset(ToothGrowth, supp == levels(supp)[1]), t.test(len ~ dose) )
subset(ToothGrowth, supp == levels(supp)[1])
t.test(len)$conf
with(ToothGrowth, t.test(len)$conf)
?by
head(warpbreaks)
by(warpbreaks[, 1:2], warpbreaks[,"tension"], summary)
by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)
by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)$conf
by(ToothGrowth[,1], ToothGrowth[,2:3], t.test$conf)
WG.TEST <- by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)
class(WG.TEST)
WG.TEST <- by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)
by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)
by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)
WG.TEST
unlist(WG.TEST)
unlist(WG.TEST)$conf.int1
unlist(WG.TEST)
dim( unlist(WG.TEST) )
length( unlist(WG.TEST) )
matrix( unlist(WG.TEST), nr = 6 )
matrix( unlist(WG.TEST), nr = 6, byrow = T )
matrix( unlist(WG.TEST), nr = 6, byrow = T )[,4:5]
WG.TEST
matrix( unlist(WG.TEST), nr = 6, byrow = T )[,3:5]
p.adjust(matrix( unlist(WG.TEST), nr = 6, byrow = T )[,3], method = "bonferroni")
p.adjust(matrix( unlist(WG.TEST), nr = 6, byrow = T )[,3], method = "bonferroni") < .05
p.adjust(matrix( unlist(WG.TEST), nr = 6, byrow = T )[,3], method = "BH") < .05
p.adjust(matrix( unlist(WG.TEST), nr = 6, byrow = T )[,3], method = "bonferroni") < .05
WG.CI <- matrix( unlist(WG.TEST), nr = 6, byrow = T )[,4:5]
WG.CI
ToothGrowth[,2:3]
WG.supp.TEST <- by(ToothGrowth[,1], ToothGrowth[,2], t.test)
WG.supp.TEST
p.adjust(matrix( unlist(WG.supp.TEST), nr = 6, byrow = T )[,3], method = "bonferroni") < .05
p.adjust(matrix( unlist(WG.supp.TEST), nr = 2, byrow = T )[,3], method = "bonferroni") < .05
WG.dose.TEST <- by(ToothGrowth[,1], ToothGrowth[,3], t.test)
p.adjust(matrix( unlist(WG.dose.TEST), nr = 3, byrow = T )[,3], method = "bonferroni") < .05
WG.dose.TEST
p.adjust(matrix( unlist(WG.dose.TEST), nr = 3, byrow = T )[,3], method = "bonferroni") < .05
WG.supp.TEST <- by(ToothGrowth[,1], ToothGrowth[,2], t.test)
WG.supp.TEST
plot(extra ~ group, data = sleep)
with(ToothGrowth[,1], ToothGrowth[,2], t.test)
with(ToothGrowth, t.test(len[supp == "OJ"], len[supp == "VC"]))
WG.supp.TEST <- with(ToothGrowth, t.test(len[supp == "OJ"], len[supp == "VC"]))
unlist(WG.supp.TEST)
WG.supp.TEST$p.value
p.adjust(WG.supp.TEST$p.value, method = "bonferroni") < .05
with(ToothGrowth, t.test(len[dose == 0.5], len[dose == 1]))
WG.dose.TEST12 <- with(ToothGrowth, t.test(len[dose == 0.5], len[dose == 1]))
WG.dose.TEST23 <- with(ToothGrowth, t.test(len[dose == 1], len[dose == 2]))
WG.dose.TEST13 <- with(ToothGrowth, t.test(len[dose == 0.5], len[dose == 2]))
p.adjust(c(WG.dose.TEST12$p.value,WG.dose.TEST23$p.value,WG.dose.TEST13$p.value), method = "bonferroni") < .05
?WorldPhones
?ToothGrowth
by(ToothGrowth[,1],ToothGrowth[,2:3], summary)
p.adjust(TG.supp.TEST$p.value, method = "bonferroni") < .05
TG.supp.TEST <- with(ToothGrowth, t.test(len[supp == "OJ"], len[supp == "VC"]))
p.adjust(TG.supp.TEST$p.value, method = "bonferroni") < .05
source('F:/Data_science_programs/ExploratoryAnalysis/ExData_Plotting1/Import.R')
setwd("F:/Data_science_programs/ExploratoryAnalysis/ExData_Plotting1")
source('F:/Data_science_programs/ExploratoryAnalysis/ExData_Plotting1/Import.R')
with(UCI_P, plot(1:Global_active_power, Global_active_power, type = "n"))
with(UCI_P, plot(seq(1:length(Global_active_power)), Global_active_power, type = "n"))
with(UCI_P, plot(seq(1:length(Global_active_power)), Global_active_power, type = "n"), ylab = "Global Active Power (kilowatts)", xlab = 1:3)
with(UCI_P, plot(seq(1:length(Global_active_power)), Global_active_power, type = "n"), ylab = "Global Active Power (kilowatts)", xlab = 1:3)
with(UCI_P, plot(seq(1:length(Global_active_power)), Global_active_power, type = "n", ylab = "Global Active Power (kilowatts)", xlab = 1:3))
with(UCI_P, plot(seq(1:length(Global_active_power)), Global_active_power, type = "n", ylab = "Global Active Power (kilowatts)", xlab = ""))
with(UCI_P, plot(rep(0,length(Global_active_power)), Global_active_power, type = "n", ylab = "Global Active Power (kilowatts)", xlab = ""))
rep(0,length(Global_active_power))
rep(0,length(Global_active_power)
)
with(UCI_P, plot(Date) )
with(UCI_P, plot(,Date) )
with(UCI_P, plot(9,Date) )
with(UCI_P, plot(0,Date) )
with(UCI_P, plot(rep(0,length(Global_active_power)), Global_active_power, type = "n", ylab = "Global Active Power (kilowatts)", xlab = ""))
with(UCI_P, plot(rep("a",length(Global_active_power)), Global_active_power, type = "n", ylab = "Global Active Power (kilowatts)", xlab = ""))
with(UCI_P, plot(rep(0,length(Global_active_power)), Global_active_power, type = "n", ylab = "Global Active Power (kilowatts)", xlab = ""))
with(UCI_P, plot(rep(1,length(Global_active_power)), Global_active_power, type = "n", ylab = "Global Active Power (kilowatts)", xlab = ""))
with(UCI_P, plot(rep(1,length(Global_active_power)),as.numeric(as.character(UCI_P$Global_active_power)), type = "n", ylab = "Global Active Power (kilowatts)", xlab = ""))
weekdays(UCI_P$Date, abbreviate = TRUE)
with(UCI_P, plot(0,weekdays(UCI_P$Date, abbreviate = TRUE)) )
with(UCI_P, plot(0,weekdays(Date, abbreviate = TRUE)) )
with(UCI_P, plot(weekdays(Date, abbreviate = TRUE)) )
weekdays(Date, abbreviate = TRUE)
with(UCI_P, plot(weekdays(Date, abbreviate = TRUE)) )
plot(weekdays(Date, abbreviate = TRUE), data = UCI_P)
plot(weekdays(UCI_P$Date, abbreviate = TRUE)
)
plot(weekdays(UCI_P$Date, abbreviate = TRUE))
plot(0,weekdays(UCI_P$Date, abbreviate = TRUE))
with(UCI_P, plot(rep(0, length(Date)), weekdays(Date, abbreviate = TRUE)) )
with(UCI_P, plot(rep(0, length(Date)), weekdays(Date, abbreviate = TRUE))
)
with(UCI_P, plot(rep(0, length(Date)), weekdays(Date, abbreviate = TRUE))  )
with(UCI_P, plot(0, weekdays(Date, abbreviate = TRUE))  )
with(UCI_P, plot(weekdays(Date, abbreviate = TRUE))  )
with(UCI_P, plot(Date)  )
with(UCI_P, plot(0, Date)  )
with(UCI_P, plot(Date, 0)  )
with(UCI_P, plot(Date, rep(0, length(Date)))  )
with(UCI_P, plot(Date, rep(8, length(Date)))  )
with(UCI_P, plot(Date, rep(4, length(Date)))  )
with(UCI_P, plot(Date, as.numeric(as.character(UCI_P$Global_active_power)))  )
Date + 1
UCI_P[,Date + 1]
with(UCI_P, plot(Date + 1, as.numeric(as.character(UCI_P$Global_active_power)))  )
with(UCI_P, plot(c(Date, tail(Date)+1), c( as.numeric(as.character(UCI_P$Global_active_power)), 1) )  )
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(UCI_P$Global_active_power)), 1) )  )
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(UCI_P$Global_active_power)), 1) ), type = "n"  )
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(UCI_P$Global_active_power)), 1) ), type = "n"  )
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(UCI_P$Global_active_power)), 1), type = "n" )  )
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(UCI_P$Global_active_power)), 1), type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
with(UCI_P, lines(Global_active_power))
lines(Global_active_power)
lines(Global_active_power, data=UCI_P)
lines(UCI_P$Global_active_power)
with(UCI_P, points(Global_active_power))
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(UCI_P$Global_active_power)), 1), type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(UCI_P$Global_active_power)), 1), type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
points(Global_active_power, data=UCI_P)
?points
points(1:length(Global_active_power),Global_active_power, data=UCI_P)
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(UCI_P$Global_active_power)), 1), type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
with(UCI_P, points(1:length(Global_active_power),Global_active_power ) )
with(UCI_P, points(1:length(Global_active_power),Global_active_power, type = "l" ) )
with(UCI_P, points(1:length(Global_active_power),as.numeric(as.character(UCI_P$Global_active_power)), type = "l" ) )
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(UCI_P$Global_active_power)), 1), type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
with(UCI_P, points(1:length(Global_active_power),as.numeric(as.character(UCI_P$Global_active_power)), type = "l" ) )
with(UCI_P, points(1:length(Global_active_power),as.numeric(as.character(UCI_P$Global_active_power)) ) )
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(UCI_P$Global_active_power)), 1), type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
with(UCI_P, points(1:length(Global_active_power),as.numeric(as.character(UCI_P$Global_active_power)) ) )
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(Global_active_power)), 1), type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
with(UCI_P, points(1:length(Global_active_power),as.numeric(as.character(Global_active_power)) ) )
?lines
with(UCI_P, lines(1:length(Global_active_power),as.numeric(as.character(Global_active_power)) ) )
with(UCI_P, plot(rep(1,length(Global_active_power)),as.numeric(as.character(UCI_P$Global_active_power)), type = "n", ylab = "Global Active Power (kilowatts)", xlab = ""))
with(UCI_P, plot(1:length(Global_active_power)),as.numeric(as.character(UCI_P$Global_active_power)), type = "n", ylab = "Global Active Power (kilowatts)", xlab = ""))
with(UCI_P, plot(1:length(Global_active_power)),as.numeric(as.character(UCI_P$Global_active_power)), ylab = "Global Active Power (kilowatts)", xlab = ""))
with(UCI_P,
plot(1:length(Global_active_power),as.numeric(as.character(UCI_P$Global_active_power)),
ylab = "Global Active Power (kilowatts)", xlab = "")
)
with(UCI_P,
plot(1:length(Global_active_power),as.numeric(as.character(UCI_P$Global_active_power)),
type = "l",
ylab = "Global Active Power (kilowatts)", xlab = "")
)
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(Global_active_power)), 1), type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
lot(1:length(Global_active_power),as.numeric(as.character(UCI_P$Global_active_power)))
plot(1:length(Global_active_power),as.numeric(as.character(UCI_P$Global_active_power)))
with(UCI_P,
plot(1:length(Global_active_power),as.numeric(as.character(UCI_P$Global_active_power)),
type = "l",
ylab = "Global Active Power (kilowatts)", xlab = "")
)
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(Global_active_power)), 1), type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
with(UCI_P, lines(1:(length(Global_active_power)+1),
c(as.numeric(as.character(Global_active_power)),0)  ) )
as.numeric(as.character(Global_active_power))
L <- with(UCI_P,
plot(1:length(Global_active_power),as.numeric(as.character(UCI_P$Global_active_power)),
type = "l",
ylab = "Global Active Power (kilowatts)", xlab = "")
)
with(UCI_P, plot(c(Date, tail(Date)[1]+1), c( as.numeric(as.character(Global_active_power)), 1), type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
lines(L)
UCI_P[,DateTime:= as.POSIXct(paste(Date, Time), format="%d/%m/%Y %H:%M:%S") ]
UCI_P
UCI_P[,DateTime <- as.POSIXct(paste(Date, Time), format="%d/%m/%Y %H:%M:%S") ]
UCI_P[,DateTime <- as.POSIXct(paste(as.character(Date), as.character(Time)), format="%d/%m/%Y %H:%M:%S") ]
UCI_P[,DateTime:= as.POSIXct(paste(as.character(Date), as.character(Time)), format="%d/%m/%Y %H:%M:%S") ]
UCI_P
UCI_P[,DateTime:= as.POSIXct(paste(as.character(Date), as.character(Time)), format="%Y/%m/%d %H:%M:%S") ]
UCI_P
weekdays(paste(UCI_P$Date, UCI_P$Time), abbreviate = TRUE)
paste(UCI_P$Date, UCI_P$Time)
paste(UCI_P$Date, UCI_P$Time)
as.Date( paste(UCI_P$Date, UCI_P$Time) )
as.Date( paste(UCI_P$Date, UCI_P$Time), format ="%Y/%m/%d %H:%M:%S"  )
as.Date( paste(UCI_P$Date, UCI_P$Time), format ="%y/%m/%d %H:%M:%S"  )
as.Date(paste(UCI_P$Date, UCI_P$Time), format ="%Y-%m-%d %H:%M:%S"  )
as.Date(paste(UCI_P$Date, UCI_P$Time), format ="%Y-%m-%d %H:%M:%S"  )
paste(UCI_P$Date, UCI_P$Time)
as.Date(paste(UCI_P$Date, UCI_P$Time))
as.POSIXct(paste(UCI_P$Date, UCI_P$Time))
with(UCI_P, plot(c(as.POSIXct(paste(UCI_P$Date, UCI_P$Time)) ,  as.numeric(as.character(Global_active_power)), type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
)
with(UCI_P,
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "n", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
with(UCI_P, lines(1:(length(Global_active_power)),
as.numeric(as.character(Global_active_power))  ) )
with(UCI_P,
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
source('F:/Data_science_programs/ExploratoryAnalysis/ExData_Plotting1/plot2.R')
with(UCI_P,
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "energy sub-metering", xlab = "" )  )
with(UCI_P,
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")  )
with(UCI_P,
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")  )
with(UCI_P,
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )  )
with(UCI_P,
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")  )
with(UCI_P,
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")  )
legend("topright", pch = 1, col = c("black", "red", "blue"), lengend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright", pch = 1, col = c("black", "red", "blue"), lengend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3")))
legend("topright", pch = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3")) )
legend("topright", pch = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
source('F:/Data_science_programs/ExploratoryAnalysis/ExData_Plotting1/plot3.R')
par(mfrow = c(2, 2))
with(UCI_P,{
hist(as.numeric(as.character(Global_active_power)), col = brewer.pal(3,"YlOrRd")[3],
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
with(UCI_P,
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
with(UCI_P,
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )  )
with(UCI_P,
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")  )
with(UCI_P,
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")  )
legend("topright", pch = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
})
par(mfrow = c(2, 2))
with(UCI_P,{
hist(as.numeric(as.character(Global_active_power)), col = brewer.pal(3,"YlOrRd")[3],
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
with(UCI_P,
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power (kilowatts)", xlab = "" )  )
with(UCI_P,
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )  )
with(UCI_P,
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")  )
with(UCI_P,
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")  )
legend("topright", pch = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
})
require(RColorBrewer)
par(mfrow = c(2, 2))
with(UCI_P,{
hist(as.numeric(as.character(Global_active_power)), col = brewer.pal(3,"YlOrRd")[3],
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power (kilowatts)", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
})
par(mfrow = c(2, 2))
with(UCI_P,{
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power (kilowatts)", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Voltage)),
type = "l", ylab =  "Voltage", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
})
par(mfrow = c(2, 2))
with(UCI_P,{
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power (kilowatts)", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Voltage)),
type = "l", ylab =  "Voltage", xlab = "datetime" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_reactive_power)),
type = "l", ylab =  "Voltage", xlab = "datetime" )
})
source('F:/Data_science_programs/ExploratoryAnalysis/ExData_Plotting1/plot4.R')
UCI <- data.table(read.table(unz(DATAzip,file_ls), sep = ";", head = TRUE))
UCI
source('F:/Data_science_programs/ExploratoryAnalysis/ExData_Plotting1/plot4.R')
source('F:/Data_science_programs/ExploratoryAnalysis/ExData_Plotting1/plot4.R')
