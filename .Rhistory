plot(seq(2,8,by=.01),dnorm(seq(2,8,by=.01), M_exp, SD_exp/sqrt(40)), type = "l", xlab = "quantile", ylab = "density")
lines(SIM$mids,SIM$density, type = "l", col = "red")
mean(mns)
sd(mns)
abs(mean(mns) - M_exp)
abs(sd(mns) - SD_exp/sqrt(40))
mns
min(mns)
max(mns)
plot(seq(min(mns),max(mns),by=.01),dnorm(seq(min(mns),max(mns),by=.01), M_exp, SD_exp/sqrt(40)), type = "l", xlab = "quantile", ylab = "density")
lines(SIM$mids,SIM$density, type = "l", col = "red")
SIM$density
SIM$mids
plot(seq(min(SIM$mids),max(SIM$mids),by=.01),dnorm(seq(min(mns),max(mns),by=.01), M_exp, SD_exp/sqrt(40)), type = "l", xlab = "quantile", ylab = "density")
plot(seq(min(SIM$mids),max(SIM$mids),by=.01),dnorm(seq(min(SIM$mids),max(SIM$mids),by=.01), M_exp, SD_exp/sqrt(40)), type = "l", xlab = "quantile", ylab = "density")
lines(SIM$mids,SIM$density, type = "l", col = "red")
require(datasets)
summary(ToothGrowth)
head(ToothGrowth)
summary(ToothGrowth)
summary(ToothGrowth)
head(ToothGrowth)
tail(ToothGrowth)
table(ToothGrowth$dose)
table(ToothGrowth$supp)
subset(TothGrowth, supp = table(ToothGrowth$supp)[1])
subset(ToothGrowth, supp = table(ToothGrowth$supp)[1])
table(ToothGrowth$supp)[1]
names(table(ToothGrowth$supp)[1])
subset(ToothGrowth, supp = names(table(ToothGrowth$supp)[1]))
names(table(ToothGrowth$supp)[1])
subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1]))
subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1]))$len
boxplot(subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1]))$len ~ dose, data = ToothGrowth)
boxplot(len ~ dose, data = ToothGrowth)
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1])))
colnames(ToothGrowth)
colnames(ToothGrowth)[3]
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1])), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1])
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1])), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1])
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[2])), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1])
names(table(ToothGrowth$supp)[1]
names(table(ToothGrowth$supp)[1])
names(table(ToothGrowth$supp)[1])
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[1])), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[1]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == names(table(ToothGrowth$supp)[2])), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[2]))
summary(ToothGrowth)
?with
levels(supp)[1]
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[1]))
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[1]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[2]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[2]))
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[1]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[2]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[2]))
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[1]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[2]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[2]))
par(mfrow = c(2, 1))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[1]))
colnames(ToothGrowth)[1]
colnames(ToothGrowth)
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(supp)[1])
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[1]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[2]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = names(table(ToothGrowth$supp)[2]))
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[1]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(ToothGrowth$supp)[1])
boxplot(len ~ dose, data = subset(ToothGrowth, supp == levels(supp)[2]), xlab = colnames(ToothGrowth)[3], ylab = colnames(ToothGrowth)[1], main = levels(ToothGrowth$supp)[2])
?t.test
with(subset(ToothGrowth, supp == levels(supp)[1]), t.test(len, dose), )
with(subset(ToothGrowth, supp == levels(supp)[1]), t.test(dose, len), )
with(subset(ToothGrowth, supp == levels(supp)[1]), t.test(len ~ dose), )
with(subset(ToothGrowth, supp == levels(supp)[1]), t.test(len ~ dose) )
subset(ToothGrowth, supp == levels(supp)[1])
t.test(len)$conf
with(ToothGrowth, t.test(len)$conf)
?by
head(warpbreaks)
by(warpbreaks[, 1:2], warpbreaks[,"tension"], summary)
by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)
by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)$conf
by(ToothGrowth[,1], ToothGrowth[,2:3], t.test$conf)
WG.TEST <- by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)
class(WG.TEST)
WG.TEST <- by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)
by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)
by(ToothGrowth[,1], ToothGrowth[,2:3], t.test)
WG.TEST
unlist(WG.TEST)
unlist(WG.TEST)$conf.int1
unlist(WG.TEST)
dim( unlist(WG.TEST) )
length( unlist(WG.TEST) )
matrix( unlist(WG.TEST), nr = 6 )
matrix( unlist(WG.TEST), nr = 6, byrow = T )
matrix( unlist(WG.TEST), nr = 6, byrow = T )[,4:5]
WG.TEST
matrix( unlist(WG.TEST), nr = 6, byrow = T )[,3:5]
p.adjust(matrix( unlist(WG.TEST), nr = 6, byrow = T )[,3], method = "bonferroni")
p.adjust(matrix( unlist(WG.TEST), nr = 6, byrow = T )[,3], method = "bonferroni") < .05
p.adjust(matrix( unlist(WG.TEST), nr = 6, byrow = T )[,3], method = "BH") < .05
p.adjust(matrix( unlist(WG.TEST), nr = 6, byrow = T )[,3], method = "bonferroni") < .05
WG.CI <- matrix( unlist(WG.TEST), nr = 6, byrow = T )[,4:5]
WG.CI
ToothGrowth[,2:3]
WG.supp.TEST <- by(ToothGrowth[,1], ToothGrowth[,2], t.test)
WG.supp.TEST
p.adjust(matrix( unlist(WG.supp.TEST), nr = 6, byrow = T )[,3], method = "bonferroni") < .05
p.adjust(matrix( unlist(WG.supp.TEST), nr = 2, byrow = T )[,3], method = "bonferroni") < .05
WG.dose.TEST <- by(ToothGrowth[,1], ToothGrowth[,3], t.test)
p.adjust(matrix( unlist(WG.dose.TEST), nr = 3, byrow = T )[,3], method = "bonferroni") < .05
WG.dose.TEST
p.adjust(matrix( unlist(WG.dose.TEST), nr = 3, byrow = T )[,3], method = "bonferroni") < .05
WG.supp.TEST <- by(ToothGrowth[,1], ToothGrowth[,2], t.test)
WG.supp.TEST
plot(extra ~ group, data = sleep)
with(ToothGrowth[,1], ToothGrowth[,2], t.test)
with(ToothGrowth, t.test(len[supp == "OJ"], len[supp == "VC"]))
WG.supp.TEST <- with(ToothGrowth, t.test(len[supp == "OJ"], len[supp == "VC"]))
unlist(WG.supp.TEST)
WG.supp.TEST$p.value
p.adjust(WG.supp.TEST$p.value, method = "bonferroni") < .05
with(ToothGrowth, t.test(len[dose == 0.5], len[dose == 1]))
WG.dose.TEST12 <- with(ToothGrowth, t.test(len[dose == 0.5], len[dose == 1]))
WG.dose.TEST23 <- with(ToothGrowth, t.test(len[dose == 1], len[dose == 2]))
WG.dose.TEST13 <- with(ToothGrowth, t.test(len[dose == 0.5], len[dose == 2]))
p.adjust(c(WG.dose.TEST12$p.value,WG.dose.TEST23$p.value,WG.dose.TEST13$p.value), method = "bonferroni") < .05
?WorldPhones
?ToothGrowth
by(ToothGrowth[,1],ToothGrowth[,2:3], summary)
p.adjust(TG.supp.TEST$p.value, method = "bonferroni") < .05
TG.supp.TEST <- with(ToothGrowth, t.test(len[supp == "OJ"], len[supp == "VC"]))
p.adjust(TG.supp.TEST$p.value, method = "bonferroni") < .05
library("sqldf")
acs <- read.csv("./data/ss06pid.csv")
setwd("F:/Data_science_programs/Getting and Cleaning Data/Quiz")
acs <- read.csv("./data/ss06pid.csv")
acs$pwgtp1[acs$AGEP < 50] == sqldf("select * from acs where AGEP < 50 and pwgtp1")
acs$pwgtp1[acs$AGEP < 50] == sqldf("select * from acs")
acs$pwgtp1[acs$AGEP < 50] == sqldf("select * from acs where AGEP < 50")
acs$pwgtp1[acs$AGEP < 50] == sqldf("select pwgtp1 from acs where AGEP < 50")
sum ( acs$pwgtp1[acs$AGEP < 50] == sqldf("select * from acs where AGEP < 50 and pwgtp1") )
sum ( acs$pwgtp1[acs$AGEP < 50] == sqldf("select * from acs") )
sum ( acs$pwgtp1[acs$AGEP < 50] == sqldf("select * from acs where AGEP < 50") )
sum ( acs$pwgtp1[acs$AGEP < 50] == sqldf("select pwgtp1 from acs where AGEP < 50") )  # totally TRUE
sum ( unique(acs$AGEP) == sqldf("select unique AGEP from acs") )
unique(acs$AGEP)
sum ( unique(acs$AGEP) == sqldf("select distinct AGEP from acs") )
sum ( unique(acs$AGEP) == sqldf("select AGEP where unique from acs") )
sum ( unique(acs$AGEP) == sqldf("select AGEP where unique from acs") )
acs$AGEP
unique(acs$AGEP
)
?unique
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
nchar( htmlCode[c(10,20,30,100)] )
head(htmlCode)
library(foreign)
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
DT = read.fwf(con, widths = c(15, 4, 4, 9, 4, 9, 4, 9, 4), skip = 4)
close(con)
sum(DT[,4])
dim(DT)
summary(DT[,4])
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?print.trellis()
?trellis.par.set
data(airquality)
require(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
Month
head(airquality)
unique(airquality$Month)
?geoms
?geoms()
?geom()
?qplot
g <- ggplot(movies, aes(votes, rating))
print(g)
g <- qplot(movies, aes(votes, rating))
print(g)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
png(file = "plot4.png", width = 480, height = 480)
par(mfrow = c(2, 2))
?legend()
with(UCI_P,{
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Voltage)),
type = "l", ylab =  "Voltage", xlab = "datetime" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"),border = "black", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_reactive_power)),
type = "l", ylab =  "Global_reactive_power", xlab = "datetime" )
})
dev.off()
DATAzip <- "exdata-data-household_power_consumption.zip"
file_ls <- as.character( unzip(DATAzip, list = TRUE)$Name )
require(data.table)
as.character( unzip(DATAzip, list = TRUE)$Name )
unzip(DATAzip, list = TRUE)$Name
setwd("F:/Data_science_programs/ExploratoryAnalysis/ExData_Plotting1")
file_ls <- as.character( unzip(DATAzip, list = TRUE)$Name )
require(data.table)
UCI <- data.table(read.table(unz(DATAzip,file_ls), sep = ";", head = TRUE))
UCI[,Date:=as.Date(as.character(Date), "%d/%m/%Y")]
TARGET_DATE <- c("2007-02-01","2007-02-02")
UCI_P <- UCI[Date == TARGET_DATE[1] | Date == TARGET_DATE[2],]
dim( UCI_P[sum( grep("?",1:dim(UCI_P)[1], fixed = TRUE) ) > 0,] )[1]
png(file = "plot4.png", width = 480, height = 480)
par(mfrow = c(2, 2))
with(UCI_P,{
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Voltage)),
type = "l", ylab =  "Voltage", xlab = "datetime" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"),border = "black", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_reactive_power)),
type = "l", ylab =  "Global_reactive_power", xlab = "datetime" )
})
dev.off()
source('F:/Data_science_programs/ExploratoryAnalysis/ExData_Plotting1/plot4.R')
png(file = "plot4.png", width = 480, height = 480)
par(mfrow = c(2, 2))
with(UCI_P,{
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Voltage)),
type = "l", ylab =  "Voltage", xlab = "datetime" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"),border = "white", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_reactive_power)),
type = "l", ylab =  "Global_reactive_power", xlab = "datetime" )
})
dev.off()
par(mfrow = c(2, 2))
with(UCI_P,{
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Voltage)),
type = "l", ylab =  "Voltage", xlab = "datetime" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"),border = "white", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_reactive_power)),
type = "l", ylab =  "Global_reactive_power", xlab = "datetime" )
})
par(mfrow = c(2, 2))
with(UCI_P,{
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Voltage)),
type = "l", ylab =  "Voltage", xlab = "datetime" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"),fill = "white", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_reactive_power)),
type = "l", ylab =  "Global_reactive_power", xlab = "datetime" )
})
par(mfrow = c(2, 2))
with(UCI_P,{
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Voltage)),
type = "l", ylab =  "Voltage", xlab = "datetime" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"),fill = "white", border = "white", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_reactive_power)),
type = "l", ylab =  "Global_reactive_power", xlab = "datetime" )
})
par(mfrow = c(2, 2))
with(UCI_P,{
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Voltage)),
type = "l", ylab =  "Voltage", xlab = "datetime" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"),lwd=0, legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_reactive_power)),
type = "l", ylab =  "Global_reactive_power", xlab = "datetime" )
})
par(mfrow = c(2, 2))
with(UCI_P,{
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Voltage)),
type = "l", ylab =  "Voltage", xlab = "datetime" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"),bty=n, legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_reactive_power)),
type = "l", ylab =  "Global_reactive_power", xlab = "datetime" )
})
par(mfrow = c(2, 2))
with(UCI_P,{
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_active_power)),
type = "l", ylab =  "Global Active Power", xlab = "" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Voltage)),
type = "l", ylab =  "Voltage", xlab = "datetime" )
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_1)),
type = "l", ylab =  "Energy sub metering", xlab = "" )
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_2)),
type = "l", col = "red")
lines( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Sub_metering_3)),
type = "l", col = "blue")
legend("topright", pch = 1, col = c("black", "red", "blue"),bty="n", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot( as.POSIXct(paste(Date, Time)) ,  as.numeric(as.character(Global_reactive_power)),
type = "l", ylab =  "Global_reactive_power", xlab = "datetime" )
})
source('F:/Data_science_programs/ExploratoryAnalysis/ExData_Plotting1/plot4.R')
Pf <- .12   #Father contracted the disease
Pfum <- .17 #at least one of the parents has contracted the disease
Pfam <- .06 #both the parents has contracted the disease
Pm <- Pfum - Pf + Pfam #the answer
Pm
qunif(100)
qunif(100)
qunif(100)
qunif()
qunif(1)
?qunif
qunif(.75)
qunif(.50)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(p)
sum(x*p)
P_senstivity <- .75
P_specificity <- .52
P <- .30# positive predicative value P|+ : the subject actually has preganacy given that the test is positive
P_positive <- (P_senstivity*P)/((P_sensitivity*P) + (1-P_specificity)*(1-P))
P_sensitivity <- .75
P_positive <- (P_sensitivity*P)/((P_sensitivity*P) + (1-P_specificity)*(1-P))
P_positive
pnorm(70,80,10)
?pnorm
pnorm(70,80,10)*100
qnorm(.95, 1100, 75)
qnorm(.99, 1100, 75)
qnorm(.975, 1100, 75)
rnorm(100, 1100, 75)
quantile(rnorm(100, 1100, 75),.95)
quantile(rnorm(100, 1100, 75),.95)
quantile(rnorm(100, 1100, 75), .95)
Q4S <- rnorm(100, 1100, 75)
qnorm(.95, mean(Q4S), sd(Q4S))
qnorm(.95, mean(Q4S), sd(Q4S)/sqrt(100))
Q4S <- rnorm(100, 1100, 75)
qnorm(.95, mean(Q4S), sd(Q4S)/sqrt(100))
qnorm(.95, 1100, 75/sqrt(100))
pbinom(4,size = 5, prob = .5)
?pbinom
n <- 5
pvals <- seq(0, 1, length = 1000)
plot(c(0, 1), c(0, 1.2), type = "n", frame = FALSE, xlab = "p", ylab = "likelihood")
text((0 : n) /n, 1.1, as.character(0 : n))
sapply(0 : n, function(x) {
phat <- x / n
if (x == 0) lines(pvals,  ( (1 - pvals) / (1 - phat) )^(n-x), lwd = 3)
else if (x == n) lines(pvals, (pvals / phat) ^ x, lwd = 3)
else lines(pvals, (pvals / phat ) ^ x * ( (1 - pvals) / (1 - phat) ) ^ (n-x), lwd = 3)
}
)
title(paste("Likelihoods for n = ", n))
pbinom(4,size = 5, prob = .5, lower.tail = FALSE)
pnorm(14:16, 15, 10/sqrt(100))
dnorm(14:16, 15, 10/sqrt(100))
pnorm(14:16, 15, 10/sqrt(100))
pnorm(16, 15, 10/sqrt(100)) - pnorm(14, 15, 10/sqrt(100))
ppois(10, lambda = 5*3)
m <- 1100
s <- 30
n <- 9
round(sqrt((n - 1) * s^2/qchisq(c(0.975, 0.025), n - 1)), 3)
round(sqrt((n - 1) * s^2/qchisq(c(0.975, 0.025), n - 1)), m)
round(sqrt((n - 1) * s^2/qchisq(c(0.975, 0.025), n - 1)), 3)
m + c(-1, 1) * qt(0.975, n - 1) * s/sqrt(n)
s <- -m*sqrt(n)/qt(.975, n - 1)
m <- -2
n <- 9
s
-m*sqrt(n)
qt(.975, n - 1)
-m*sqrt(n)/qt(.975, n - 1)
s
qt(.975, n - 1)
-m*sqrt(n)/qt(.975, n - 1)
s <- -m*sqrt(n)/qt(.975, n - 1)
s
NewMWT_AVG <- 3
NewMWT_VAR <- .6
NewNIGHT <- 10
OldMWT_AVG <- 5
OldMWT_VAR <- .68
OldNIGHT <- 10
sp <-  sqrt((NewNIGHT * NewMWT_VAR + OldNIGHT * OldMWT_VAR) / (NewNIGHT + OldNIGHT - 2))
(NewMWT_AVG - OldMWT_AVG) +  c(-1, 1) * qt(.975, 27) * sp *(1/NewNIGHT + 1/OldNIGHT)^.5
(NewMWT_AVG - OldMWT_AVG) +  c(-1, 1) * qt(.975, (NewNIGHT + OldNIGHT - 2)) * sp *(1/NewNIGHT + 1/OldNIGHT)^.5
sp <-  sqrt(( (NewNIGHT-1) * NewMWT_VAR + (OldNIGHT -1) * OldMWT_VAR) / (NewNIGHT + OldNIGHT - 2))
(NewMWT_AVG - OldMWT_AVG) +  c(-1, 1) * qt(.975, (NewNIGHT + OldNIGHT - 2)) * sp *(1/NewNIGHT + 1/OldNIGHT)^.5
qt(.95, 10) > qt(.90, 10)
df <- (NewMWT_VAR^2/NewNIGHT + OldMWT_VAR^2/OldNIGHT)^2/((NewMWT_VAR^2/NewNIGHT)^2/(NewNIGHT - 1) + (OldMWT_VAR^2/OldNIGHT)^2/(OldNIGHT - 1))
df
(NewMWT_AVG - OldMWT_AVG) +  c(-1, 1) * qt(.975, df) * (NewMWT_VAR/NewNIGHT + OldMWT_VAR/OldNIGHT)^.5
NewMWT_AVG <- 4
NewMWT_VAR <- .5^2
NewNIGHT <- 100
OldMWT_AVG <- 6
OldMWT_VAR <- 2^2
OldNIGHT <- 100
df <- (NewMWT_VAR^2/NewNIGHT + OldMWT_VAR^2/OldNIGHT)^2/((NewMWT_VAR^2/NewNIGHT)^2/(NewNIGHT - 1) + (OldMWT_VAR^2/OldNIGHT)^2/(OldNIGHT - 1))
#sp <-  sqrt(( (NewNIGHT-1) * NewMWT_VAR + (OldNIGHT -1) * OldMWT_VAR) / (NewNIGHT + OldNIGHT - 2))
(NewMWT_AVG - OldMWT_AVG) +  c(-1, 1) * qt(.975, df) * (NewMWT_VAR/NewNIGHT + OldMWT_VAR/OldNIGHT)^.5
( OldMWT_AVG - NewMWT_AVG) +  c(-1, 1) * qt(.975, df) * (NewMWT_VAR/NewNIGHT + OldMWT_VAR/OldNIGHT)^.5
T_AVG <- -3
T_STD <- 1.5
T_N <- 9
P_AVG <- 1
P_STD <- 1.8
P_N <- 9
(T_AVG - P_AVG) + c(-1, 1) * qt(.95, T_N + P_N - 2) *  sqrt( ((T_N - 1) * T_STD^2 + (P_N-1) * P_STD^2) / (T_N + P_N-2)) * sqrt(1/T_N + 1/P_N)
SUBJ <- 1:5
BASE <- c(140, 138, 150, 148, 135)
TEST <- c(132, 135, 151, 146, 130)
t.test(TEST - BASE, paired = T)
TEST - BASE
t.test(TEST - BASE, paired = T)
t.test(TEST, BASE, paired = T)
t.test(TEST, BASE, paired = T)$p-value
t.test(TEST, BASE, paired = T)$pvalue
unlist( t.test(TEST, BASE, paired = T) )
t.test(TEST, BASE, paired = T)p.vlaue
t.test(TEST, BASE, paired = T)p.value
t.test(TEST, BASE, paired = T)$p.value
?t,test
?t.test
30/sqrt(9)
1100 + c(-1,1)*qt(.975, 9 - 1)*30/sqrt(9)
pbinom(3, size = 4, prob = .5, lower.tail = FALSE)
1 - pbinom(3, size = 4, prob = .5, lower.tail = FALSE)
pbinom(4, size = 4, prob = .5, lower.tail = FALSE)
pbinom(3, size = 4, prob = .5, lower.tail = FALSE)
pbinom(3, size = 4, prob = .5, lower.tail = FALSE)
pbinom(2, size = 4, prob = .5, lower.tail = FALSE)
pbinom(3, size = 4, prob = .5, lower.tail = FALSE)
pbinom(1, size = 4, prob = .5, lower.tail = FALSE)
pbinom(3, size = 4, prob = .5, lower.tail = FALSE)
pbinom(3, size = 4, prob = .75, lower.tail = FALSE)
1 - pbinom(3, size = 4, prob = .75, lower.tail = FALSE)
Lamda0 <- 10/1787
ppois(1, Lamda0*100, lower.tail = FALSE)
